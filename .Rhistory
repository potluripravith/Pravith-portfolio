shiny::runApp()
cars <- read.csv("www/imports-85.data") %>% as_tibble()
View(rmd2UI)
cars <- read.csv("www/imports-85.data/") %>% as_tibble()
cars <- read.csv("imports-85.data") %>% as_tibble()
colnames(cars) <- c(
"symboling", "normalized_losses", "make", "fuel_type", "aspiration",
"num_doors", "body_style", "drive_wheels", "engine_location", "wheel_base",
"length", "width", "height", "curb_weight", "engine_type", "num_cylinders",
"engine_size", "fuel_system", "bore", "stroke", "compression_ratio",
"horsepower", "peak_rpm", "city_mpg", "highway_mpg", "price"
)
runApp()
library(readr)
library(tidyr)
library(dplyr)
library(tibble)
library(caret)
library(purrr)
library(ggplot2)
cars <- read.csv("imports-85.data") %>% as_tibble()
colnames(cars) <- c(
"symboling", "normalized_losses", "make", "fuel_type", "aspiration",
"num_doors", "body_style", "drive_wheels", "engine_location", "wheel_base",
"length", "width", "height", "curb_weight", "engine_type", "num_cylinders",
"engine_size", "fuel_system", "bore", "stroke", "compression_ratio",
"horsepower", "peak_rpm", "city_mpg", "highway_mpg", "price"
)
missing_counts <- sapply(cars, function(x) sum(is.na(x)))
print(missing_counts)
# Remove rows with missing or invalid data in numeric columns
cars_clean <- na.omit(cars_numeric)
cars_numeric <- cars %>% select(where(is.numeric))
cars <- na.omit(cars_numeric)
cars_numeric <- cars %>% select(where(is.numeric))
cars <- na.omit(cars_numeric)
cars <- cars %>%
select(symboling, wheel_base, length, width, height, curb_weight, engine_size,
bore, stroke, compression_ratio, horsepower, peak_rpm, city_mpg, highway_mpg, price) %>%
filter(
stroke != "?",
bore != "?",
horsepower != "?",
peak_rpm != "?",
price != "?"
) %>%
mutate(
stroke = as.numeric(stroke),
bore = as.numeric(bore),
horsepower = as.numeric(horsepower),
peak_rpm = as.numeric(peak_rpm),
price = as.numeric(price)
)
cars_numeric <- cars %>% select(where(is.numeric))
cars <- na.omit(cars_numeric)
cars <- cars %>%
select(symboling, wheel_base, length, width, height, curb_weight, engine_size,
bore, stroke, compression_ratio, horsepower, peak_rpm, city_mpg, highway_mpg, price) %>%
filter(
stroke != "?",
bore != "?",
horsepower != "?",
peak_rpm != "?",
price != "?"
) %>%
mutate(
stroke = as.numeric(stroke),
bore = as.numeric(bore),
horsepower = as.numeric(horsepower),
peak_rpm = as.numeric(peak_rpm),
price = as.numeric(price)
)
library(readr)
library(tidyr)
library(dplyr)
library(tibble)
library(caret)
library(purrr)
library(ggplot2)
cars <- read.csv("imports-85.data") %>% as_tibble()
colnames(cars) <- c(
"symboling", "normalized_losses", "make", "fuel_type", "aspiration",
"num_doors", "body_style", "drive_wheels", "engine_location", "wheel_base",
"length", "width", "height", "curb_weight", "engine_type", "num_cylinders",
"engine_size", "fuel_system", "bore", "stroke", "compression_ratio",
"horsepower", "peak_rpm", "city_mpg", "highway_mpg", "price"
)
missing_counts <- sapply(cars, function(x) sum(is.na(x)))
print(missing_counts)
# Remove rows with missing or invalid data in numeric columns
cars_numeric <- cars %>% select(where(is.numeric))
cars <- na.omit(cars_numeric)
cars <- cars %>%
select(symboling, wheel_base, length, width, height, curb_weight, engine_size,
bore, stroke, compression_ratio, horsepower, peak_rpm, city_mpg, highway_mpg, price) %>%
filter(
stroke != "?",
bore != "?",
horsepower != "?",
peak_rpm != "?",
price != "?"
) %>%
mutate(
stroke = as.numeric(stroke),
bore = as.numeric(bore),
horsepower = as.numeric(horsepower),
peak_rpm = as.numeric(peak_rpm),
price = as.numeric(price)
)
View(cars_numeric)
library(readr)
library(tidyr)
library(dplyr)
library(tibble)
library(caret)
library(purrr)
library(ggplot2)
cars <- read.csv("imports-85.data") %>% as_tibble()
colnames(cars) <- c(
"symboling", "normalized_losses", "make", "fuel_type", "aspiration",
"num_doors", "body_style", "drive_wheels", "engine_location", "wheel_base",
"length", "width", "height", "curb_weight", "engine_type", "num_cylinders",
"engine_size", "fuel_system", "bore", "stroke", "compression_ratio",
"horsepower", "peak_rpm", "city_mpg", "highway_mpg", "price"
)
missing_counts <- sapply(cars, function(x) sum(is.na(x)))
print(missing_counts)
# Remove rows with missing or invalid data in numeric columns
cars <- cars %>% select(where(is.numeric))
cars <- na.omit(cars_numeric)
cars <- cars %>%
select(symboling, wheel_base, length, width, height, curb_weight, engine_size,
bore, stroke, compression_ratio, horsepower, peak_rpm, city_mpg, highway_mpg, price) %>%
filter(
stroke != "?",
bore != "?",
horsepower != "?",
peak_rpm != "?",
price != "?"
) %>%
mutate(
stroke = as.numeric(stroke),
bore = as.numeric(bore),
horsepower = as.numeric(horsepower),
peak_rpm = as.numeric(peak_rpm),
price = as.numeric(price)
)
cars <- read.csv("imports-85.data") %>% as_tibble()
colnames(cars) <- c(
"symboling", "normalized_losses", "make", "fuel_type", "aspiration",
"num_doors", "body_style", "drive_wheels", "engine_location", "wheel_base",
"length", "width", "height", "curb_weight", "engine_type", "num_cylinders",
"engine_size", "fuel_system", "bore", "stroke", "compression_ratio",
"horsepower", "peak_rpm", "city_mpg", "highway_mpg", "price"
)
missing_counts <- sapply(cars, function(x) sum(is.na(x)))
print(missing_counts)
# Remove rows with missing or invalid data in numeric columns
cars <- cars %>%
select(symboling, wheel_base, length, width, height, curb_weight, engine_size,
bore, stroke, compression_ratio, horsepower, peak_rpm, city_mpg, highway_mpg, price) %>%
filter(
stroke != "?",
bore != "?",
horsepower != "?",
peak_rpm != "?",
price != "?"
) %>%
mutate(
stroke = as.numeric(stroke),
bore = as.numeric(bore),
horsepower = as.numeric(horsepower),
peak_rpm = as.numeric(peak_rpm),
price = as.numeric(price)
)
ggplot(cars, aes(x = price)) +
geom_histogram(color = "red") +
labs(
title = "Distribution of prices in cars dataset",
x = "Price",
y = "Frequency"
)
cars <- cars %>%
select(symboling, wheel_base, length, width, height, curb_weight, engine_size,
bore, stroke, compression_ratio, horsepower, peak_rpm, city_mpg, highway_mpg, price) %>%
filter(
stroke != "?",
bore != "?",
horsepower != "?",
peak_rpm != "?",
price != "?"
) %>%
mutate(
stroke = as.numeric(stroke),
bore = as.numeric(bore),
horsepower = as.numeric(horsepower),
peak_rpm = as.numeric(peak_rpm),
price = as.numeric(price)
)
ggplot(cars, aes(x = price)) +
geom_histogram(color = "red") +
labs(
title = "Distribution of prices in cars dataset",
x = "Price",
y = "Frequency"
)
featurePlot(cars, cars$price)
split_indices <- createDataPartition(cars$price, p = 0.8, list = FALSE)
train_cars <- cars[split_indices,]
test_cars <- cars[-split_indices,]
five_fold_control <- trainControl(method = "cv", number = 5)
tuning_grid <- expand.grid(k = 1:20)
full_model <- train(price ~ .,
data = train_cars,
method = "knn",
trControl = five_fold_control,
tuneGrid = tuning_grid,
preProcess = c("center", "scale"))
# Make predictions on the test set
predictions <- predict(full_model, newdata = test_cars)
# Evaluate model performance
postResample(pred = predictions, obs = test_cars$price)
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
install.packages('rsconnect')
library(rsconnect)
rsconnect::setAccountInfo(name='616hsn-potluri-pravith',
token='77C42E5D850B35B20BAF8AC8097B095E',
secret='WiSUazsqb0U2NXwAOi+dUD4ut/IFlMzDeeRktcQT')
deployApp()
shiny::runApp()
